<?xml version="1.0"?>
<article xmlns="http://docbook.org/ns/docbook" 
	 xmlns:xlink="http://www.w3.org/1999/xlink">
  <section>
    <title>Services</title>
    <para>
      At least, the following technical components should be understood in order to establish a professional presence on the internet. Good practice requires to review pre-installed configuration files and read the associated documentation carefully. Examples in the following sections refer to Fortylines solutions' setup of its Ubuntu 8.10 server.
      <table>
	<caption>Services</caption>
	<tr><th>name</th><th>application of choice</th><th>standard ports</th><th>details</th></tr>
	<tr><td>Domain Name Sever (DNS)</td>
	  <td><link xlink:href="http://www.isc.org/products/BIND">bind</link></td>
	  <td>53</td><td>RFC1034, RFC1035</td></tr>
	<tr><td>Internet Message Access Protocol (IMAP)</td>
	  <td><link xlink:href="http://www.dovecot.org/">dovecot</link></td>
	  <td>143, 993</td><td>RFC3501</td></tr>
	<tr><td>Message Transfer Agent (MTA)</td>
	  <td><link xlink:href="http://www.postfix.org/">postfix</link></td>
	  <td>25, 587</td><td>RFC821, RFC2821</td></tr>
	<tr><td>Secure Shell (SSH)</td>
	  <td><link xlink:href="http://www.openssh.com/">openssh</link></td>
	  <td>22</td><td>RFC4252-RFC4255</td></tr>
	<tr><td>Hypertext Transfer Protocol (HTTP)</td>
	  <td><link xlink:href="http://www.apache.org/">apache</link></td>
	  <td>80, 443</td><td>RFC2616, RFC2818</td></tr>
      </table>
    </para>
    <para>Tip: You will most times need to figure out what is going on. &quot;ls -lrt /var/log&quot; will show last log modified. If there is any information worth looking at, it will most likely show up there.</para>
  </section>
  <section>
    <title>Firewall</title>
    <para>
      Communication services are either used to
    </para>
    <simplelist>
      <member>1. Reach out to the community</member>
      <member>2. Coordinate trusted developpers</member>
    </simplelist>
    <para>
      Services in the first category are accessible by anyone and everyone. Technically they will require to open and forward a dedicated port in the firewall. Services in the second category require <link xlink:href="access.book#authentication">authentication</link>. A single dedicated port to a Virtual Private Network (VPN) is open in the firewall and services are only allowed to run on the VPN. We thus opened ports 22, 25 and 80 in the firewall facing the outside world.   
    </para>
  </section>
  
  <section>
    <title>Secure Shell Login</title>
    <itemizedlist>
      <listitem><para>Installation: apt-get install openssh-server</para></listitem>
      <listitem><para>Configuration: /etc/ssh/sshd_config (see also /etc/pam.d/sshd)</para></listitem>
      <listitem><para>Restarting: /etc/init.d/ssh restart</para></listitem>
      <listitem><para>Logs: /var/log/auth.log</para></listitem>
    </itemizedlist>
    
    <para>Once sshd is installed on the server, there are two things to do. First, from the local console, use the <emphasis>ssh-keygen</emphasis> command to retrieve the server ssh key fingerprint and publish it to the people that will be allowed to remotely login into the server. For example:</para>
    <para role="code">
      <emphasis>ssh-keygen -lf /etc/ssh/ssh_host_rsa_key.pub</emphasis>
      2048 c2:0d:b3:19:bf:cf:c8:09:f7:bd:76:dc:67:cd:59:7b /etc/ssh/ssh_host_rsa_key.pub (RSA)
    </para>
    <para>Second, review the configuration file (/etc/ssh/sshd_config) and edit the settings to match your requirements. The sshd daemon offers to <link xlink:href="access.book#authentication">authenticate</link> a user using one of many schemes. It is important to note that, so far, it does not offer to authenticate through a <emphasis>combinaison</emphasis> of schemes. Each scheme has advantages and drawbacks that you need to take into concideration while designing the <link xlink:href="access.book">access policy</link>. For example</para>
    <informaltable>
      <tr><th></th><th>Public/Private Key</th><th>Password</th></tr>
      <tr><th>Major threat</th><td>Compromised client</td><td>Brute force cracking</td></tr>
      <tr><th>Server administrator stance</th><td>Unaware of breach attempts before reported or actively exploited.</td><td>Pro-actively evaluate weaknesses and detect breach attempts.</td></tr>
    </informaltable>
    <para>The risk of a compromised client is very real when all contributors have just enough skills to administrate their own machines, a laptop they carry around everywhere. Ideally, both are valuable and should be used together by the sshd daemon.</para>
    <para>The steps to configure an ssh server and client to use RSA public/private key for authentication.</para>
    <informaltable>
      <tr><th>Client</th><th>Server (i.e. <emphasis>hostname</emphasis>)</th></tr>
      <tr><td><para role="code">man ssh-keygen
	    man ssh_config
	</para></td><td><para role="code">man sshd_config</para></td></tr>
      <tr><td><para role="code">ssh-keygen -q -f ~/.ssh/id_rsa -t rsa</para></td><td>
	  <para role="code">sudo apt-get upgrade sshd
	    diff -u sshd_config.prev /etc/sshd_config
	    + Protocol 2
	    + PasswordAuthentication no
	    + PubkeyAuthentication yes
	    + AuthorizedKeysFile     %h/.ssh/authorized_keys
	    sudo /etc/init.d/ssh restart</para></td></tr>
      <tr><td colspan="2"><emphasis>Append the content of the client's file id_rsa.pub to the server's file /home/<emphasis>username</emphasis>/.ssh/authorized_keys</emphasis></td></tr>
      <tr><td><para role="code">
	    ls -la ~/.ssh
	    drwx------   .
	    -rw-r--r--   config
	    -rw-------   id_rsa
	    -rw-r--r--   id_rsa.pub
	    -rw-r--r--   known_hosts
	  </para>
	</td>
	<td>
	  <para role="code">
	    ls -la ~/.ssh
	    drwx------ .
	    -rw------- authorized_keys</para>
      </td>
      </tr>
      <tr><td><para role="code">
	    ssh -v <emphasis>hostname</emphasis>
	    ...
	    debug1: Next authentication method: publickey
	    debug1: Offering public key: /Users/<emphasis>username</emphasis>/.ssh/id_rsa
	    debug1: Server accepts key: pkalg ssh-rsa blen 277
	    debug1: Authentication succeeded (publickey).
	    ...
	</para></td>
	<td><para role="code">
	    diff sshd_config.org /etc/ssh/sshd_config
	    + LogLevel VERBOSE
	    tail -f /var/log/auth.log
	    ...
	    ... Found matching RSA key ...
	    ... Accepted publickey for <emphasis>username</emphasis> from <emphasis>client</emphasis> port 50818 sstitle
	    ... pam_unix(sshd:session): session opened for user <emphasis>username</emphasis> by (uid=0)
	    ... User child is on pid ...
      </para></td></tr>
    </informaltable>
    <para><emphasis>Tip:</emphasis> At some point, you might be temped to update sshd or its configuration through a secure shell connection instead of at the local console. In that case, it is recommended to add a cron job that will restore previously known working configuration after a few minutes before logging out. Just in case.</para>
  </section>
  
  <section>
    <title>Secure Shell Tunnels</title>
    <para>
      Port 22 is open in the firewall for secure shell login. We will also use it to <link xlink:href="https://help.ubuntu.com/community/SSH_VPN ">tunnel</link> all traffic to services on the Virtual Private Network. This also has the advantage of encrypting all traffic regardless of services provided. The server needs to permit tunnels or you will see &quot;permission denied&quot; messages.   
    </para>
    <informaltable>
      <tr><th>Client</th><th>Server (i.e. <emphasis>hostname</emphasis>)
      </th></tr>
      <tr><td></td>
	<td><para role="code">diff sshd_config.org /etc/ssh/sshd_config
	    +PermitTunnel yes</para></td>
      </tr>
      <tr><td>
	  <para role="code">ssh -f -L <emphasis>localport</emphasis>:<emphasis>hostname</emphasis>:<emphasis>hostport</emphasis> -N <emphasis>hostname</emphasis></para></td><td><para role="code">tail -f /var/log/auth.log</para>
      </td>
      </tr>
    </informaltable>
    <para>
      At that point, you can open any secure shell tunnel you want. Two tunnels are open to access e-mails, one for IMAP and one for SMTP. The following code is thus added in the client ~/.bash_profile.
    </para>
    <para role="code">
      # http://wiki.metawerx.net/wiki/SSHTunnelTroubleshooting
      function <emphasis>hostname</emphasis>_tunnels {
      ssh -f -L 9930:localhost:993 -L 5870:localhost:587 -N <emphasis>hostname</emphasis>
      }
    </para>
    <para>
      Invoking <emphasis>hostname</emphasis>_tunnels from a terminal command line will create the tunnels. Those tunnels will be open until the ssh process is killed. It is possible to also create <link xlink:href="http://www.g-loaded.eu/2006/11/24/auto-closing-ssh-tunnels/">auto closing ssh tunnels</link> with some more shell scripting if required.
    </para>
    <para>
      The Mail client is configured with the following parameters.
      <informaltable>
	<tr><th>IMAP</th><td>Incoming Mail Server</td><td>127.0.0.1</td></tr>
	<tr><th></th><td>User Name</td><td><emphasis>username</emphasis> on <emphasis>hostname</emphasis></td></tr>
	<tr><th></th><td>password</td><td><emphasis>password</emphasis> for <emphasis>username</emphasis> on <emphasis>hostname</emphasis></td></tr>
	<tr><th>SMTP</th><td>Server Name</td><td>127.0.0.1</td></tr>
	<tr><th></th><td>Custom port</td><td>5870</td></tr>
	<tr><th></th><td>Use Secure Sockets</td><td>yes</td></tr>
	<tr><th></th><td>Authentication</td><td>password</td></tr>
	<tr><th></th><td>User Name</td><td><emphasis>username</emphasis> on <emphasis>hostname</emphasis></td></tr>
	<tr><th></th><td>password</td><td><emphasis>password</emphasis> for <emphasis>username</emphasis> on <emphasis>hostname</emphasis></td></tr>
      </informaltable>
    </para>
    
    <para>Tip: test the tunnel with the webserver first. It will be easier to debug tunnel related issues rather than mail setup.</para>
  </section>
  
  <section>
    <title>Dynamic DNS</title>
    <para>The modem that connects the server to the internet through your ISP surely does not use a static IP address but rather a dynamic address assigned through DHCP, the same way, most likely, your local network is configured.</para>
    <para><link xlink:href="http://www.broadband-help.com/articles/guest/domain_name_for_your_pc/">Dynamic DNS</link> is very simple. Everytime your modem renew its DHCP lease and gets a new IP address, this address needs to be forwarded to the DNS server responsible to locate your modem. Either the modem can do that for you or a software daemon running on your server wakes up at regular intervals and generate a specifically crafted update query to the DNS server. On Ubuntu, you can <link xlink:href="https://help.ubuntu.com/community/DynamicDNS">setup dynamic DNS</link> with ddclient.</para>
    <para>There are a lot of companies offering dynamic DNS for free. As an example, you can easily register with <link xlink:href="http://www.dyndns.com">dynDNS</link> and get the url <emphasis>hostname</emphasis>.is-a-geek.com for free in a couple clicks. A direct professional <emphasis>domainname</emphasis>.com url will not cost much through &quot;Custom DNS service&quot; and is definitely worth it once you got everything up-and-running. There is a quota on the monthly DNS query volume and if you either reach it, most likely your business is successful enough to upgrade to a more professional infrastructure. Here is an example to setup ddclient together with dynDNS.</para>
    <para role="code">
      sudo apt-get install ddclient
      ls -la /etc/ddclient.conf
      -rw------- 1 root root <emphasis>...</emphasis> /etc/ddclient.conf
      sudo cat /etc/ddclient.conf
      # Example for /etc/ddclient.conf

      pid=/var/run/ddclient.pid
      protocol=dyndns2
      use=web, if=eth1
      server=members.dyndns.org
      login=<emphasis>dynDNS login</emphasis>
      password=<emphasis>dynDNS password</emphasis>
      <emphasis>hostname</emphasis>.is-a-geek.com, <emphasis>domainname</emphasis>.com
    </para>
    
    <para>
      For mail delivery, you might also want to setup MX records with your dynamic DNS provider. If your mail server never goes down, it will work without them. 
    </para>
  </section>
  
  <section>
    <title>Web service</title>
    <itemizedlist>
      <listitem><para>Installation: apt-get install apache2</para></listitem>
      <listitem><para>Configuration: /etc/apache2/apache2.conf, /etc/apache2/httpd.conf</para></listitem>
      <listitem><para>Restarting: /etc/init.d/apache2 restart</para></listitem>
      <listitem><para>Logs: /var/log/apache2/access.log, /var/log/apache2/error.log</para></listitem>
    </itemizedlist>
    <para>
      Looking at the configuration file, Ubuntu apache2 setup is configured to use a directory /etc/apache2/sites-enabled with links to files in /etc/apache2/sites-available. You most likely want to /etc/apache2/sites-enabled/000-default to point to your own configuration snipset or edit /etc/apache2/sites-available/default directly. You will also want to add a ServerName directive to /etc/apache2/apache2.conf in order to get rid of the warning &quot;Could not reliably determine the server's fully qualified domain name...&quot; message.
    </para>
    <para role="code">
      diff apache2.conf.org /etc/apache2/apache2.conf
      + ServerName <emphasis>domainname</emphasis>
    </para>
    <para>Another directive you might want to take a close look at is <emphasis>DirectoryIndex</emphasis>. All urls pointing to the directory will try to load a specified default file.
    </para>
  </section>
  
  <section>
    <title>E-mail Service</title>
    <itemizedlist>
      <listitem><para>Installation: apt-get install postfix</para></listitem>
      <listitem><para>Configuration: /etc/postfix/master.cf /etc/postfix/main.cf</para></listitem>
      <listitem><para>Restarting: /etc/init.d/postfix restart</para></listitem>
      <listitem><para>Logs: /var/log/syslog, /var/log/mail.log</para></listitem>
    </itemizedlist>
    <para>
      A good point to start reading are the <link xlink:href="https://help.ubuntu.com/community/Postfix">Ubuntu Postix Tutorials</link> and <link xlink:href="http://souptonuts.sourceforge.net/postfix_tutorial.html">Gmail on Home Linux Box using Postfix and Fetchmail</link>.</para>
    <para>
      It is not straightforward to figure what is going on when e-mails do not work as expected. For <link xlink:href="http://www.postfix.com/DEBUG_README.html">debugging postfix</link>, you might want to append <emphasis>-v</emphasis> to the smtp line in /etc/postfix/master.cf as a first step.
    </para>
    <para role="code">
      diff main.cf.org /etc/postfix/main.cf
      +smtp_tls_loglevel = 1
      +smtpd_tls_loglevel = 1
    </para>
    <para>Identification of the mail server:</para>
    <para role="code">
      +myorigin = /etc/mailname
      +mydestination = <emphasis>domainname</emphasis>, <emphasis>hostname</emphasis>, localhost
      +home_mailbox= Maildir/
    </para>
    <para>You first will want to enable Transport Layer Security (TLS) to avoid usernames, passwords and messages to travel in clear text.</para>
    <para role="code">
      diff main.cf.org /etc/postfix/main.cf
      # TLS parameters
      +smtp_use_tls=yes
      +smtp_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      +smtp_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      +smtp_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
      +smtp_tls_session_cache_database = btree:${data_directory}/smtp_scache
      +
      +smtpd_use_tls=yes
      +smtpd_tls_received_header = yes
      +smtpd_tls_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem
      +smtpd_tls_key_file=/etc/ssl/private/ssl-cert-snakeoil.key
      +smtpd_tls_CAfile = /etc/ssl/certs/ca-certificates.crt
      +smtpd_tls_session_cache_database = btree:${data_directory}/smtpd_scache
      +
      +tls_random_source = dev:/dev/urandom
    </para>
    <section>
      <title>Outgoing Mail</title>
      <para>
	Mail servers send each other messages on port 25. Most Internet Service Providers (ISP) block outbound port 25 as a way to prevent spam relays. Port 587 remains open for submission of messages by users that can authenticate with an outgoing mail server.</para>
      <para>Thus, setting up postfix as the outgoing message agent might require to use a relay mail transfer agent to send outgoing e-mails. To do that, you can use any mail server allowed to talk on port 25, and on which you have an account. For example, you can use a gmail account.</para>
      <para role="code">
	diff main.cf.org /etc/postfix/main.cf
	+# Gmail Relay
	+relayhost = [smtp.gmail.com]:587
	+disable_dns_lookups = yes
	
	+smtp_sasl_auth_enable = yes
	+smtp_sasl_security_options= noanonymous
	+smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd
	+smtp_sasl_type = cyrus
	+
	+smtpd_sasl_auth_enable= yes
	+smtpd_sasl_local_domain= 
	+smtpd_sasl_security_options= noanonymous
	+smtpd_sasl_type = dovecot
	+smtpd_sasl_path = private/auth-client
	+smtpd_sender_restrictions = 
	+    permit_mynetworks,
	+    permit_sasl_authenticated,
	+    reject_non_fqdn_sender,
	+    reject_unknown_sender_domain
	+smtpd_recipient_restrictions= 
	+    permit_sasl_authenticated,
	+    permit_mynetworks,
	+    reject_unauth_destination
	
	diff master.cf.org /etc/postfix/master.cf
	+submission inet n       -       -       -       -       smtpd
	# When relaying mail as backup MX, disable fallback_relay to avoid MX loops
	relay     unix  -       -       -       -       -       smtp
 	-o smtp_fallback_relay=
	+        -o smtp_generic_maps=
	
	diff sasl_passwd.org /etc/postfix/sasl_passwd
	+[smtp.gmail.com]:587            <emphasis>username</emphasis>@gmail.com:<emphasis>password</emphasis>
      </para>
      
      <para role="code">
	postmap sasl_passwd
      </para>
      
      <para>Gmail will rewrite your outgoing message to read &quot;from <emphasis>username</emphasis>@gmail.com&quot; as a way to also prevent spam and false identities. Fortunately, you can use <link xlink:href="http://email.about.com/od/gmailtips/qt/et112605.htm">any &quot;from&quot; address</link> while relaying mail through gmail as long as you can receive e-mail at that address. All you need is to login in your gmail account and go through &quot;Settings > Accounts and Imports > Send Mail from another address&quot;. From a login on your server, test outgoing messages by using the following command:</para>
      <para role="code">
	echo "Email relayed by gmail" | mail -s 'test of relay' <emphasis>username</emphasis>@gmail.com
      </para>
      
      <!-- \todo remove on clean up:
	   http://www.irbs.net/internet/postfix/0410/1520.html -->
    </section>
    <section>
      <title>Incoming Mail</title>
      <para>Mbox, the default format for e-mail storage by postfix is simple and straightforward but incompatible with POP3/IMAP services. Those services can only retrieved e-mails stored locally as Maildir mailboxes. One of the first thing is to set Maildir as the type of mailboxes used by postfix. 
      </para>
      <para>
	Locate the line starting with <emphasis>myorigin</emphasis> and update the referenced file. On Ubuntu, it is currently /etc/mailname. Edit this file and set the first line to <emphasis>domainname</emphasis>.   
      </para>
      <para>Restart the server and try sending mail to an account on the server. The logs and /home/<emphasis>username</emphasis>/Maildir/new/ should show some acitivity.</para>
      <para>To access your mail through your normal mail client, you will want to install an <link xlink:href="http://saturn.med.nyu.edu/it/help/email/imap/index.html">POP or IMAP server</link>.</para>
      <itemizedlist>
	<listitem><para>Installation: apt-get install dovecot-imapd</para></listitem>
	<listitem><para>Configuration: /etc/dovecot/dovecot.conf</para></listitem>
	<listitem><para>Restarting: /etc/init.d/dovecot restart</para></listitem>
	<listitem><para>Logs: /var/log/syslog, /var/log/mail.log</para></listitem>
      </itemizedlist>
      <para role="code">
	diff -u dovecot.org /etc/dovecot/dovecot.conf
	+  mechanisms = plain login
	+  socket listen {
	+    client {
	+      path = /var/spool/postfix/private/auth-client
	+      mode = 0660
	+      user = postfix
	+      group = postfix 
	+    }
	+  }
      </para>
    </section>
    <section>
      <title>Mailing Aliases</title>
      <para>
	Locate lines begining with alias in /etc/postfix/main.cf, edit the referenced file (/etc/aliases on Ubuntu) to add aliases and run the <emphasis>newaliases</emphasis> command to rebuild the fast-lookup database.
      </para>
      <para role="code">
	+ info: <emphasis>username</emphasis>
      </para>
      
      <!-- use a mailing list manager (sympa, mailman, ...). -->
    </section>
  </section>
  
<!--
<section>
<h5>Git repository</h5>
<para>
After creating a new group (fortylines) and a home/fortylines folder, I moved my repository over with scp, then change file ownership to be owned by root and in the fortylines group. After all, it might not have been a great idea.
</para>
<para>
By default, git assumes that you are going to work with the files in the repository. To create a remote shared repository, we will use the \-\-bare option. We will further use the \-\-shared option to set the users that can access the repository.
</para>
<para>
"A short aside about what git means by bare: A default git repository assumes that you’ll be using it as your working directory, so git stores the actual bare repository files in a .git directory alongside all the project files. Remote repositories don’t need copies of the files on the filesystem unlike working copies, all they need are the deltas and binary what-nots of the repository itself. This is what “bare” means to git. Just the repository itself."
</para>
<para>Note that group is actually spelled group. as opposite to user and world.
<para role="code">
git \-\-bare init \-\-shared=group
</para>

I edited /home/fortylines/seed/.git/config such that it looks like:
[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
and I edited *workspace*/seed/.git/config such that it looks like:

[core]
        repositoryformatversion = 0
        filemode = true
        bare = false
        logallrefupdates = true
[remote "origin"]        url = ssh://fortylines.is-a-geek.com/home/fortylines/seed/.git
        fetch = +refs/heads/*:refs/remotes/origin/*
[branch "master"]
        remote = origin
        merge = refs/heads/master

git clone foo.com:/pub/repo.git/ my-project
http://www.urbanpuddle.com/articles/2008/07/11/installing-git-on-a-server-ubuntu-or-debian
</section>


\todo section on audit (nmap)

<title>Hardware platform</title>
<para>
<itemizedlist>
<listitem>#1 It can be loaned from a virtual server provider</listitem>
<listitem>#2 It can be sold with the server installed</listitem>
<listitem>#3 It can be a prerequisite</listitem>
</itemizedlist>
</para>

-->
</article>
