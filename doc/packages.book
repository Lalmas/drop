<h1>Packages</h1>
<h2>Package Distribution Model</h2>
<p>
Most operating systems distribute software in the form of packages. At a high-level, each package defines prerequisites packages that need to be installed on the system before it, itself, can be used. The operating system uses a package manager to analyze the packages dependency graph and determine how to update the local system based on an end-user selection.
</p>
<p>
Software is always in an ever-evolving state. In order to keep a local system up-to-date with latest available features and fixes, software is tested, built, packaged and stored on remote update servers. Each package comes with a small specification file that primarly contains information about a package prerequisite dependencies. The remote server aggregates all specification files into a small index file that contains the packages dependency graph. On a local system update, the local package manager downloads the index file and through the analysis of the packages dependency graph, decides to download actual packages and install them on the local system.
</p>
<h2>Distribution Specific Package Management</h2>
<p>
</p>
<table>
<tr>
	<td></td>
	<td><a href="http://www.ubuntu.com">Ubuntu</a></td>
	<td><a href="http://www.fedoraproject.org/">Fedora</a></td>
	<td>OSX</td>
	<td>Windows</td>
</tr>
<tr>
	<th>Update tool</th>
	<td><a href="https://help.ubuntu.com/community/SwitchingToUbuntu/FromLinux/%20RedHatEnterpriseLinuxAndFedora">apt-*</a>, aptitude</td>
	<td><a href="http://www.phy.duke.edu/~rgb/General/yum_HOWTO/yum_HOWTO/yum_HOWTO-1.html">yum</a></td>
	<td>There is no official update tool for all software deployed on an OSX platform even though packaging projects as disk images is a common practise.</td>
	<td>There is no official update tool for all software deployed on a Windows platform. <a href="http://wwww.cygwin.com">Cygwin</a> has become a de-facto manager for open source packages. <a href="http://www.nabber.org/projects/cyg-get/">cyg-get.py</a> is a command-line tool very convienient to update packages from the command-line.</td>
</tr>
<tr>
	<th>Package format</th>
	<td><a href="http://synthesize.us/HOWTO_make_a_deb_archive_without_dpkg">.deb</a> file</td>
	<td>.rpm file</td>
	<td>.pkg file bundled as a .dmg</td>
	<td>.tar.bz2</td>
</tr>
<tr>
	<th>Index</th>
	<td><a href="http://mirrors.us.kernel.org/ubuntu/dists/jaunty/main/binary-amd64/Packages.bz2">Packages.bz2</a></td>
	<td><a href="http://mirrors.us.kernel.org/fedora/releases/11/Fedora/x86_64/os/repodata/">repodata/</a></td>
	<td><a href="http://www.apple.com/downloads/">Apple Website</a></td>
	<td><a href="http://cygwin.elite-systems.org/setup.ini">setup.ini</a>,
	 <a href="http://cygwin.elite-systems.org/setup-2.ini">setup-2.ini</a></td>
</tr>
<tr><td colspan="5"><h3>Building packages</h3></td></tr>
<tr>
	<th>Guidelines</th>
	<td><a href="http://www.debian-administration.org/articles/336">Rolling your own Debian package</a>, <a href="https://wiki.ubuntu.com/PackagingGuide">Rolling your own Ubuntu package</a></td>

	<td><a href="http://www.rpm.org/max-rpm/index.html">RedHat Package Manager</a>, <a href="http://docs.fedoraproject.org/developers-guide/ch-rpm-building.html">Building Fedora RPM Packages</a>, <a href="https://fedoraproject.org/wiki/Packaging/Guidelines"> Packaging guidelines</a></td>

	<td><a href="http://developer.apple.com/documentation/developertools/conceptual/SoftwareDistribution/Introduction/Introduction.html#//apple_ref/doc/uid/10000145i-CH1-DontLinkElementID_69">Packaging and Distribution Software</a> by Apple, <a href="http://developer.apple.com/documentation/Darwin/Reference/Manpages/man1/packagemaker.1.html">packagemaker man pages</a></td>

	<td><a href="http://cygwin.com/setup.html">Cygwin Package Contributor&quot;s Guide</a></td>
</tr>

<tr>
	<th>Control files</th>
	<td>debian/ directory in source tree</td>
	<td><a href="http://fedoraproject.org/wiki/Packaging/NamingGuidelines">%{name}.spec</a></td>
	<td>files in the pkg tree</td>
	<td>three methods and a setup.hint file</td>
</tr>
<tr>
	<td>Building commands</td>
	<td><pre>cd %name && debuild</pre>
	</td>

	<td>
	<pre>
yum install rpmdevtools
rpmdev-setuptree
rpmbuild -bb --clean %name.spec</pre>
	</td>
	<td>Good starting point reading through <a href="http://python.net/~gherman/projects/buildpkg/">buildpkg.py</a>
	</td>

	<td>
	<pre>cygport %name all</pre>
	</td>
</tr>
<tr>
	<th>Creating remote repository</th>
	<td><a href="http://www.debian.org/doc/manuals/repository-howto/repository-howto.en.html">Debian Repository HOWTO</a></td>
	<td><a href="http://sial.org/howto/rpm/">RedHat Package Manager Tips</a>, <a href="http://www.linux.com/feature/37660">How to run your own yum repository</a>. In modern Fedora distribution, yum-arch has been replaced by createrepo.</td>
<td>None</td>
<td>None</td>
</tr>
</table>
<h2>Random notes</h2>
<p>Information for <a href="https://www.gerts.net/sysconf/pkgupdate/">Solaris package management</a> is also available. The update tool is called <td><a href="http://www.bolthole.com/solaris/pkg-get.html">pkg-get</a>.</p>
<p>
I've been trying cyg-apt but it turned out it seemed old. Cyg-get.py uses optparse so the command line syntax is quite strange for a package manager tool but it worked very well.</p>
<p>Most times, recent packages cannot be found in cygwin but are available in <a href="http://www.cygwinports.org/">cygwinports</a>. Since both sites are using the same distribution model, cyg-get.py can be used to download for either one.
</p>
<p>
All software compiled for Windows using cygwin need to be delivered with the cygwin.dll. On the other hand, <a href="http://www.mingw.com">mingwin</a> uses native win32 calls directly.</p>
<p>Looking at <a href="http://trac.project-builder.org/">Project-Builder.org</a> might be a good step to find more details information. These perl scripts aim to provide support to automate packaging for different distribution.</p>
