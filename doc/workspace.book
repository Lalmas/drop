<?xml version="1.0"?>
<section xmlns="http://docbook.org/ns/docbook" 
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xml:id="workspace.book">
  <info>
    <title>Workspaces</title>
    <date>February 13th, 2010</date>
  </info>

  <!-- Building Code --> 
    <para>
      A workspace manager application is used to setup a contributor's system with third-party prerequisites and source code under revision control such that it is possible to execute a development cycle (edit/build/run) on a local machine. As such, the workspace manager application integrates functionality usually found in package managers, configure scripts and make together in a single consistent bundle.</para>
  
  <section>
    <title>Dependencies</title>
    <para>
      Projects at least depend on some compiler toolchain. Most times, they also require third-party tools and libraries. Configure scripts based on <link xlink:href="http://www.gnu.org/software/autoconf/">autoconf</link> are usually used to analyze a <link linkend="glossary.book#localMachine">local machine</link> for prerequisites. Unfortunately, once a prerequisite is identified as missing, very little help is given on how to fulfill that dependency.
    </para>
    <para>
      Most open source distributions use a notion of <link linkend="glossary.book#package">package</link> and tools called package managers to resolve runtime dependencies. It eventually guarantees a whole subsystem of projects will run together. As package managers focus on runtime stability, installed files on a local machine often get out of date with the prerequisites of a project's head leaving developpers having to fall back on compiling third-party dependencies from source, duplicating most of the efforts that goes into building distribution packages.
    </para>
    <para>
      When development requires changes in multiple projects, there are also no way to rebuilt those projects in dependence topological order. In most of these cases, custom shell scripts and/or recursive makes are put together as needed.</para>
    <para>
      A workspace concept and a workspace manager tool, <link linkend="dws.book">dws</link>, has been put together to alleviate the time each contributor deals with dependency troubles.</para>
    <para>
      A workspace relies on environment variables (<link linkend="dws.book#srcTop">srcTop</link>, <link linkend="dws.book#buildTop">buildTop</link>, etc.) and a project dependency graph.</para>
    <para>
      The environment variables are set in a workspace configuration file named ws.mk. The workspace tool populates the configuration file as necessary at the time a variable value is required. The environment variables consist mostly of directory paths where source files are checked out (<link linkend="dws.book#srcTop">srcTop</link>), where object files are built (<link linkend="dws.book#buildTop">buildTop</link>), etc.</para>
    <para>
      The dependency graph contains information typically found in a package manager (yum, apt, etc.) as well as information usually found in configure scripts (autoconf). In the same way Linux distributions gather packages dependencies into a global dependency database, project dependency information is aggregated in a single index file. A master copy of the project dependency graph is stored on a remote server and cached locally on the development local machine.</para>
    <para>
      The workspace tool will extract a subset of the dependency graph from a set of projects. All projects in the extracted subset which are neither present as a directory in <link linkend="dws.book#srcTop">srcTop</link> nor generated executables, headers, libraries, etc. found pre-installed on the local machines will be flagged as <emphasis>missing</emphasis>.</para>
    <para>
      A project does not built as long as there are <emphasis>missing</emphasis> prerequisites. Those prerequisites will have to be installed from either:
    </para>
    <variablelist>
      <varlistentry>
	<term>Compiling a source repository</term>
	<listitem>
	  <para>The project is considered to be part of the workspace and will be checked-out as a source controlled directory in <link linkend="dws.book#srcTop">srcTop</link>. A project can either contain all its sources code under revision control or just a patch into another source package.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>A custom package</term>
	<listitem>
	  <para>A custom package has already been built from a source controlled directory and uploaded to the remote server. This is a typical method of installation for projects that are not part of a contributor's focus or third-party packages unavailable through the official distribution package manager.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>A distribution package</term>
	<listitem>
	  <para>An official binary distribution package installed through the platform package manager.</para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>
      Only in the most unlikely case where all else breaks, the installation will have to be done manually.</para>
  </section>
  
  <section>
    <title>Make</title>
    <para>
      The workspace tool inter-project dependency
      intra-project dependencies through regular makefile      
    </para>
    <para>
      prefix Makefile suffix
      crossprefix Makefile crosssuffix
      provides standard for C++, book, distribution regression tests...
      => ws.mk prefix.mk Makefile suffix.mk
    </para>    
    <para>
      The <link xlink:href="http://www.gnu.org/software/make/manual/make.html">GNU Make Reference Manual</link> is very well written and contains the detailed information on how make works, thus the place to look when debugging Makefiles. Of course, as a reference manual, it has very little on writing Makefiles for large maintainable source code bases.
    </para>
    
    <!--
	\todo It is the topic of the next chapters.
	<title>Compiling - Libtool</title>
	-->
  </section>
</section>

