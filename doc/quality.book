<?xml version="1.0"?>
<section xmlns="http://docbook.org/ns/docbook" 
	 xmlns:xlink="http://www.w3.org/1999/xlink"
	 xml:id="quality.book">
  <info>
    <title>Source Code Quality</title>
    <date>February 13th, 2010</date>
  </info>
  
  <para>
    Conventions and Test Units.
  </para>

  <section>
    <title>Conventions</title>
    <para>The purpose of conventions is to make it faster for developers to use pre-existing general knowledge and start contributing to specific projects they were unfamiliar with. Conventions also help create automated tools and an infrastructure to build code, run tests and generate status reports (as detailed in <link linkend="workspace.book">workspace</link>).</para>
    <para>Each project in fortylines source repository is organized as follow</para>
    <variablelist>
      <varlistentry>
	<term>index.xml</term>
	<listitem>
	  <para>Project description and inter-projects dependency information.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>Makefile</term>
	<listitem>
	  <para>GNU Makefile used to build and install a project files on the local system.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>data/</term>
	<listitem><para>Files necessary to build and run project executables but which are not considered source files.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>doc/</term>
	<listitem><para>General documentation for the project which cannot be extracted from the source files.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>include/</term>
	<listitem><para>Public header files (.hh, .tcc) that are installed in <xref linkend="dws.book#includeDir" /> (ex. /usr/local/include).</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>src/</term>
	<listitem><para>Source code in the form of C++ (.cc) and Python (.py) files.</para>
	</listitem>
      </varlistentry>
      <varlistentry>
	<term>test/</term>
	<listitem><para>Unit tests for the project. The organization of a test/ sub-directory follows the organization of a project directory, though mostly consisting of Makefile, src/ and data/ directories.</para>
	</listitem>
      </varlistentry>
    </variablelist>
    <para>All files in fortylines source repository should respect the following conventions</para>
    <itemizedlist>
      <listitem><para>Each source file starts with a few license paragraphs.</para></listitem>
      <listitem><para>Identifiers use camelCase with a leading lowercase letter.</para></listitem>
      <listitem><para>Each file name follows the camelCase identifier convention.</para></listitem>
    </itemizedlist>
    <para>
      A <link xlink:href="/seed/src/checkstyle.py">checkstyle</link> script runs through the top-level <link linkend="dws.book#srcTop">srcTop</link> and outputs a detailed report about projects broking those conventions.
    </para>
  </section>
  
  <section>
    <title>Unit tests</title>
    <para>The purpose of unit tests is to insure first that functionality is implemented correctly. Later in the life cycle of a project, unit tests are often relabeled regression tests and insure that changes to the source code did not break existing functionality.</para>
    <para>The definition of functional and regression tests are very often used interchangeably because a functional test can serve as the base for a regression test as much as a regression test can be used to validate functionality.</para> 
    <para>For our purpose here, the major distinction between a functional and regression test is how they were originally created. The developper of a functional test has explicitely thought about the passing and failing conditions and written explicit statements for them in the source code that is checked into the repository. The developper of a regression test typically used the build framework to trigger comparison of different runs of the same program.</para> 
    <para>As such functional tests usually result in source code while regression tests result in makefile rules. Functional tests also typically result in self-contained executables while regression tests rely on external data sets usually stored outside the version controled repository.</para>
    <informaltable>
      <tr><th>functional</th><th>regression</th></tr>
      <tr><td>explicit pass conditions</td><td>output comparison</td></tr>
      <tr><td>source code</td><td>makefiles</td></tr>
      <tr><td>self-contained</td><td>rely on external data sets</td></tr>
    </informaltable>
  </section>
  
  <section>
    <title>Conclusion</title>
    <para>As projects grow in size, it becomes cumbersome to enforce conventions manually. As a result, the only convention that exist are the ones that can be checked and enforce by an automated tool as part of the build process. Unit tests will also start breaking and become deprecated as a project moves forward. So, as a result, relevant unit tests are the ones that can be run by an automated tool as part of the <link xlink:href="usecases.book#snapshotBuilds">build process</link>.</para>
    
  </section>
</section>

