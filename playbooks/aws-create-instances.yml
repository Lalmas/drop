---
# This playbook creates ec2 instances
#
# The IAM roles and EC2 security groups must pre-exist before running
# the playbook (see: aws-create-authorized.yml).
#
# Requires definition of:
#  - tag_prefix: prefix for a logical group, ex: dev-, stage-, etc.
#  - aws_region: Region in which this local group is deployed.
#  - aws_zone: EBS volumes and EC2 instances must be in the same zone.
#  - key_name: Key used to first ssh into an instance
#  - instance_type: EC2 instance type (t2.micro, etc.)
#  - ami_id: Image on which an EC2 instance is based.

- name: Create AWS resources for front-end web server
  hosts: localhost
  connection: local
  gather_facts: False
  tasks:
  - name: Create front-end web server EC2 instances
    local_action:
      module: ec2
      key_name: "{{key_name}}"
      group: "{{tag_prefix}}castle-gate"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      region: "{{aws_region}}"
      volumes:
        - device_name: /dev/sda1
          device_type: gp2
          volume_size: 8
          delete_on_termination: true
      wait: yes
    register: front_end_servers
  - debug: msg="{{front_end_servers}}"

  # We cannot attach EBS encrypted volumes to all instance types
  # References:
  #  - http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html
  #  - http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances
  - name: Create databases EC2 instances
    local_action:
      module: ec2
      key_name: "{{key_name}}"
      group: "{{tag_prefix}}vault"
      instance_profile_name: "{{tag_prefix}}vault-profile"
      instance_type: m3.medium
      image: "{{ami_id}}"
      region: "{{aws_region}}"
      zone: "{{aws_zone}}"
      wait: yes
    register: db_server
  - debug: msg="created {{db_server}}"
  - name: Create Encrypted EBS volume
    local_action:
      module: ec2_vol
      device_name: /dev/sdf
      encrypted: yes
      instance: "{{db_server.instance_ids}}"
      region: "{{aws_region}}"
      zone: "{{aws_zone}}"
      volume_size: 20
      volume_type: gp2

  - name: Create worker EC2 instance
    local_action:
      module: ec2
      key_name: "{{key_name}}"
      group_id: "{{tag_prefix}}courtyard"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      region: "{{aws_region}}"
      volumes:
        - device_name: /dev/sda1
          device_type: io1
          volume_size: 8
          delete_on_termination: true
      wait: yes
    register: workers_ec2
  - debug: msg="{{workers_ec2}}"

  - name: Create monitoring EC2 instances
    local_action:
      module: ec2
      key_name: "{{key_name}}"
      group: "{{tag_prefix}}kitchen-door"
      instance_type: "{{instance_type}}"
      image: "{{ami_id}}"
      region: "{{aws_region}}"
      instance_profile_name: "{{tag_prefix}}kitchen-door-profile"
      volumes:
        - device_name: /dev/sda1
          volume_size: 8
          delete_on_termination: true
      wait: yes
    register: devel_servers
  - debug: msg="{{devel_servers}}"
